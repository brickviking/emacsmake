#!/bin/bash
#
# v0.1 Initial cut, should be mostly complete
# v0.2 Changes to account for mistakes I made
# v0.3 rework of environment variables
# v0.4 added distclean, maintainerclean, and run everything
# v0.5 Renamed reference from emacs-sandbox to with-emacs as upstream has renamed
#
# TODO: rework for versions of emacs earlier than 28.0.50, as there's no makefile until the
#       configure phase. Still doesn't work for much earlier than 23 - 18.59 has no configure.

#######################
# Modifiable parameters
# You WILL want to fiddle with these if you don't want the args I chose
# This WILL break if the user running (EUID) isn't the same as the user owning the source directory
# i.e. if there's no /root/src/c/emacs
COMPILEHOME="${HOME}/src/c/emacs" # Should be specific, not user-relative
COMPILEHOME="/home/viking/src/c/emacs"
# Place to put emacs (root of tree)
# EMACSHOME="${HOME}/bin/emacs-playpen"
EMACSHOME="/usr/local/"
CONFIGPARAMS=(
    "--with-imagemagick"
    "--with-cairo"
    "--with-xwidgets"
    "--prefix=${EMACSHOME}" )
# This gets used to run with-emacs.sh with custom directory
EMACSCONFHOME="${HOME}/.emacs-playpen"
EMACSRUNARGS=(
    "-d"
    "${EMACSCONFHOME}" )

###########
# Functions

# Help function, usage()
helpMe() {
    echo "$0: emacs recompiler script"
    echo "   -h    help (this text)"
    echo "   -d    Runs 'make distclean'"
    echo "   -D    Runs 'make maintainer-clean'"
    echo "   -e    run every step; distclean, configure, make, install,run"
    echo "         default emacs binary location is ${EMACSHOME}"
    echo "   -c    run ./configure with params ${CONFIGPARAMS[@]}"
    echo "   -m    compile (no install), runs make"
    echo "   -i    install to ${EMACSHOME}, runs make install"
    echo "   -r    execute from ${EMACSHOME}, runs  with-emacs.sh -d "${EMACSCONFHOME}" -i quelpa-use-package "
    echo "   -u    uninstall from ${EMACSHOME}, runs make uninstall"
}

# Runs make distclean, but only if the configure step had created one.
# TODO: no chance to break out of this, perhaps we should offer that
cleanMe() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make distclean
    else
	echo "Makefile not found, skipping"
    fi
}

# Same proviso as above, this command takes immediate effect
cleanMeGood() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make maintainer-clean
    else
	echo "Makefile not found, skipping"
    fi
}

# Runs configure phase
configMe() {
    ./configure "${CONFIGPARAMS[@]}"
}

# Runs make (hopefully we ran configure first)
makeMe() {
    if [[ -f Makefile ]]; then
	make bootstrap # because we want stale .elc files regenned
    else
	echo "No Makefile found, perhaps run with -c first?"
    fi
}

# Runs the install phase (currently don't need sudo, but would have normally done)
installMe() {
    # echo "This will require you to enter in your password" # only needed for system dirs
    # sudo make install
    # TODO: should check that there's a emacs binary first, but I don't know where that will be
    make install
}

# Assuming everything else is done, runs compiled emacs from install
runMe() {
    pushd "${EMACSHOME}"
    RETVAL=$( with-emacs.sh "${EMACSRUNARGS[@]}" )
    if [[ "${RETVAL}" != 0 ]]; then
        echo "Completed with ${RETVAL}"
    else
        echo "Completed with success"
    fi
    popd
}

# Uninstall from $EMACSHOME
uninstallMe() {
    # Only requirements are that I've installed emacs at EMACSHOME
    # and NOT reconfigured emacs since
    if [[ -f "${EMACSHOME}/bin/emacs" ]]; then
	make uninstall
    else
	echo "Are you sure you installed emacs to ${EMACSHOME}?"
    fi
}

# Do everything
execMe() {
    cleanMe
    configMe
    makeMe
    installMe
    runMe
}

########
# main()

# Need a getopts-style processor here, or I could simply roll my own. Quicker to roll.
# args=$(getopt -n "$0" -o cdDe:hmiru -l emacs:,config,distclean,maintainerclean,help,make,install,run,uninstall -- "$@") || { usage; exit 1; }

# eval set -- "$args"
# The while true won't work, as we need to run steps in order, not in the order the args are processed.
# TODO: we could handle multiple x/y/z in order, like this:
#    each arg read, sets val, then 

# First, let user know about with-emacs.sh if they don't already have it installed
SANDBOX_LOCATION=$(type -p with-emacs.sh)
if [[ -z "${SANDBOX_LOCATION}" ]]; then
    echo "You do not have with-emacs.sh (check README.org), you should probably grab this"
    echo "from the following URL: https://github.com/alphapapa/with-emacs.sh"
    echo "so you can run emacs from a sandboxed location."
    echo "Continuing anyhow"
fi
unset SANDBOX_LOCATION

if [[ -n $2 ]]; then
    echo "$0: Too many arguments, we only need one of the following"
    helpMe
elif [[ -n $1 ]]; then
    case $1 in 
        "-h"|"--help"|"-?") helpMe ;;
        "-d") pushd "${COMPILEHOME}"
	      cleanMe ;;
	"-D") pushd "${COMPILEHOME}"
	    cleanMeGood ;;
        "-e") pushd "${COMPILEHOME}" # Eventually changes to ${EMACSHOME}
	      execMe ;;
        "-c") pushd "${COMPILEHOME}"
	      configMe ;;
        "-m") pushd "${COMPILEHOME}"
	      makeMe ;;
        "-i") pushd "${COMPILEHOME}"
	      installMe ;;
        "-r") pushd "${EMACSHOME}"
	      runMe ;;
	"-u") pushd "${COMPILEHOME}"
	      uninstallMe ;;
        *) pushd "."
	      helpMe ;;
    esac
popd # FIXME: reverse whatever pushd we did, errors when helpMe called
else # We don't have $1
    helpMe
fi

