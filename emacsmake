#!/bin/bash
#
# v0.1 Initial cut, should be mostly complete
# v0.2 Changes to account for mistakes I made
# v0.3 rework of environment variables
# v0.4 added distclean, maintainerclean, and run everything
# v0.5 Renamed reference from emacs-sandbox to with-emacs as upstream has renamed
# v0.6 Finally added link to with-emacs.sh - it's about time
#      Added comment for checking number of args at runtime.
# v0.7 Added in a do-almost-all (clean, configure, make)
# v0.8 Added some commented out options (lucid and motif)
# v0.8.1 Twiddled with config, error's only in the docs
# v0.8.2 fixed docs for config with ugly hack.
# v0.9 Planning install upgrade to symlink the emacs binary to emacs-${VER}-$[WMGR}
#
# TODO: rework for versions of Emacs earlier than 28.0.50, as there's no makefile until the
#       configure phase. Still doesn't work for much earlier than 23 - 18.59 has no configure.

#######################
# Modifiable parameters
# You WILL want to fiddle with these if you don't want the args I chose
# This WILL break if the user running (EUID) isn't the same as the user owning the source directory
# i.e. if there's no /root/src/c/emacs
#COMPILEHOME="${HOME}/src/c/emacs" # Should be specific, not user-relative

COMPILEHOME="/h3/viking/src/c/hosts/gnu/emacs"
# Place to put Emacs (root of tree)
# EMACSHOME="${HOME}/bin/emacs-playpen"
EMACSHOME="/usr/local"
# Default, but check the configMe functions further down
CONFIGPARAMS=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-xwidgets"
    "--with-x-toolkit=gtk3" # for completeness's sake
    "--prefix=${EMACSHOME}" )
WMGR=gtk3
# This gets used to run with-emacs.sh with custom directory
EMACSCONFHOME="${HOME}/.emacs-playpen"
EMACSRUNARGS=(
    "-d"
    "${EMACSCONFHOME}" )

###########
# Functions

# Help function, usage(), ugly hack to put in toolkits
CONFIGPARAMSGTK=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=gtk" # for completeness's sake
    "--prefix=${EMACSHOME}"
)
CONFIGPARAMSGTK2=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=gtk2" # for completeness's sake
    "--prefix=${EMACSHOME}"
)
CONFIGPARAMSGTK3=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-xwidgets"
    "--with-x-toolkit=gtk3" # for completeness's sake
    "--prefix=${EMACSHOME}")
CONFIGPARAMSLUCID=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=lucid"
    "--prefix=${EMACSHOME}")
CONFIGPARAMSMOTIF=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=motif"
    "--prefix=${EMACSHOME}")

helpMe() {
    echo "$0: Emacs recompiler script"
    echo "   -h   help (this text)"
    echo "   -d   Runs 'make distclean'"
    echo "   -D   Runs 'make maintainer-clean'"
    echo "   -a   Runs  every step except execute"
    echo "   -e   run every step; distclean, configure, make, install, run"
    echo "        default Emacs binary location is ${EMACSHOME}"
    echo "   -c   run ./configure with params ${CONFIGPARAMS[@]}"
    echo "   -cg  run ./configure with params ${CONFIGPARAMSGTK[@]}"
    echo "   -cg2 run ./configure with params ${CONFIGPARAMSGTK2[@]}"
    echo "   -cl  run ./configure with params ${CONFIGPARAMSLUCID[@]}"
    echo "   -cm  run ./configure with params ${CONFIGPARAMSMOTIF[@]}"
    echo "   -m   compile (no install), runs make"
    echo "   -i   install to ${EMACSHOME}, runs make install"
    echo "   -r   execute from ${EMACSHOME}, runs  with-emacs.sh -d "${EMACSCONFHOME}" -i quelpa-use-package "
    echo "   -u   uninstall from ${EMACSHOME}, runs make uninstall"
}

# Runs make distclean, but only if the configure step had created one.
# TODO: no chance to break out of this, perhaps we should offer that
cleanMe() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make distclean
    else
	echo "Makefile not found, skipping"
    fi
}

# Same proviso as above, this command takes immediate effect
cleanMeGood() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make maintainer-clean
    else
	echo "Makefile not found, skipping"
    fi
}

# Runs configure phase
configMe() { # This just does GTK3, other command switches toggle
    ./configure "${CONFIGPARAMS[@]}"
}

# Should support the GTK1 crowd but here, just grabs gtk3
configMeGTK() {
CONFIGPARAMS=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=gtk"
    "--prefix=${EMACSHOME}" )
    WMGR=gtk # (might be gtk3)
    ./configure "${CONFIGPARAMS[@]}"
}

# Should support the GTK2 crowd too
configMeGTK2() {
CONFIGPARAMS=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=gtk2"
    "--prefix=${EMACSHOME}" )
    WMGR=gtk2
    ./configure "${CONFIGPARAMS[@]}"
}


# Default unless something else chosen, simply call configMe
configMeGtk3() {
    configMe
}

# Choose this if you never installed gtk - crazy, huh?
configMeLucid() {
CONFIGPARAMS=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=lucid"
    "--prefix=${EMACSHOME}" )
    WMGR=lucid
    ./configure "${CONFIGPARAMS[@]}"
}

# Choose this if you actually have a Motif or LessTif
configMeMotif() {
CONFIGPARAMS=(
    "--with-modules"
    "--with-imagemagick"
    "--with-cairo"
    "--with-x-toolkit=motif"
    "--prefix=${EMACSHOME}" )
    WMGR=motif
    ./configure "${CONFIGPARAMS[@]}"
}

# Runs make (hopefully we ran configure first)
makeMe() {
    if [[ -f Makefile ]]; then
	make bootstrap -j4 # because we want stale .elc files regenned
    else
	echo "No Makefile found, perhaps run with -c first?"
    fi
}

# Find what I made already, this is normally called from installMe
whatMadeMe() {
    # Piece to load into an array so I can parse the --with-x-toolkit parameter
    # VERY sensitive to configure output - if it changes, then this won't work.
    # If I search for $ ./configure I'll find the right line.
    if [[ -f config.log ]]; then
        mapfile -t TOOLKIT < <(sed -n '/\$ .\/configure/p' config.log | cut -c17-)
        for this in ${TOOLKIT[@]}; do
            case "${this}" in
                "--with-x-toolkit=gtk") WMGR=gtk ;; # Works out to be gtk3 here
                "--with-x-toolkit=gtk2") WMGR=gtk2 ;;
                "--with-x-toolkit=gtk3") WMGR=gtk3 ;;
                "--with-x-toolkit=lucid") WMGR=lucid ;;
                "--with-x-toolkit=motif") WMGR=motif ;;
            esac # We can simply ignore everything else
        done # for this in ${TOOLKIT}
        printf "Toolkit is: %s\n" ${WMGR}
    else
        echo "I don't think you ran configure in ${COMPILEHOME}. Please rerun emacsmake with a -c parameter"
        popd # just to keep the stack straight
        exit 1 # Shouldn't really exit here
    fi
}

# This copies the delivered binary ${EMACSHOME}/bin/emacs${VERSION} to emacs-${VERSION}-$[WMGR}
# which will be something like emacs-29.1.50-{gtk2,gtk3,lucid,motif}
# May not work for versions earlier than 28
copyMe() {
    # If we fail to find an emacs here, we failed to install
    if [[ -f ${EMACSHOME}/bin/emacs ]]; then
        EMACSTGT="$(readlink ${EMACSHOME}/bin/emacs)"
        echo "Linking ${EMACSHOME}/bin/${EMACSTGT} to ${EMACSHOME}/bin/${EMACSTGT}-${WMGR}"
        cp -iv ${EMACSHOME}/bin/${EMACSTGT} ${EMACSHOME}/bin/${EMACSTGT}-${WMGR}
    else
        echo "$0: we couldn't find an emacs at ${EMACSHOME} or ${WMGR} isn't set."
    fi
}

# Runs the install phase (currently don't need sudo, but would have normally done)
installMe() {
    # echo "This will require you to enter in your password" # only needed for system dirs
    # sudo make install
    # TODO: should check that there's an Emacs binary first, but I don't know where that will be
    # First, find out what we made from what's been left behind in the last compile
    whatMadeMe
    if [[ -z ${WMGR} ]]; then
        echo "No toolkit selected, you should probably have run emacsmake -c"
    fi
    make install
    copyMe
}

# Uninstall from $EMACSHOME
uninstallMe() {
    # The only requirements are that I've installed Emacs at EMACSHOME
    # and NOT reconfigured Emacs since
    if [[ -f "${EMACSHOME}/bin/emacs" ]]; then
	make uninstall
    else
	echo "Are you sure you installed Emacs to ${EMACSHOME}?"
    fi
}

# Assuming everything else is done, runs compiled Emacs from install
runMe() {
    pushd "${EMACSHOME}"
    RETVAL=$( with-emacs.sh "${EMACSRUNARGS[@]}" )
    if [[ "${RETVAL}" != 0 ]]; then
        echo "Completed with ${RETVAL}"
    else
        echo "Completed with success"
    fi
    popd
}

# Do almost everything
execMakeMe() {
    cleanMe # it's a distclean
    configMe
    makeMe
}

# Do everything except runMe - may require sudo
execMe() {
    execMakeMe # distclean, config and make
    installMe # Don't add copyMe to this, it's called from here already
#    runMe
}

########
# main()

# First, let user know about with-emacs.sh if they don't already have it installed
SANDBOX_LOCATION=$(type -p with-emacs.sh)
if [[ -z "${SANDBOX_LOCATION}" ]]; then
    echo "You do not have with-emacs.sh (check README.org), you should probably grab this"
    echo "from the following URL: https://github.com/alphapapa/with-emacs.sh"
    echo "so you can run Emacs from a sandboxed location."
    echo "Continuing anyhow."
fi
unset SANDBOX_LOCATION

if [[ -n $2 ]]; then # In short, if 2 or more args
    echo "$0: Too many arguments, we only need one of the following"
    helpMe
elif [[ -n $1 ]]; then
    case $1 in 
        "-h"|"--help"|"-?") helpMe ;;
        "-d") pushd "${COMPILEHOME}"
	      cleanMe
              popd ;;
	"-D") pushd "${COMPILEHOME}"
	    cleanMeGood
              popd ;;
        "-a") pushd "${COMPILEHOME}"
              execMakeMe
              popd ;;
        "-e") pushd "${COMPILEHOME}" # Eventually changes to ${EMACSHOME}
	      execMe
              popd ;;
        "-c") pushd "${COMPILEHOME}"
	      configMe
              popd ;; # Uses GTK3 with xwidgets
        "-cg") pushd "${COMPILEHOME}"
	      configMeGTK
              popd ;;
        "-cg2") pushd "${COMPILEHOME}"
	      configMeGTK2
              popd ;;
        "-cl") pushd "${COMPILEHOME}"
	      configMeLucid
              popd ;;
        "-cm") pushd "${COMPILEHOME}"
	      configMeMotif
              popd ;;
        "-m") pushd "${COMPILEHOME}"
	      makeMe
              popd ;;
        "-i") pushd "${COMPILEHOME}"
	      installMe
              popd ;;
        "-r") pushd "${EMACSHOME}"
	      runMe
              popd ;;
	"-u") pushd "${COMPILEHOME}"
	      uninstallMe
              popd ;;
        # Find out what we have before
        "-w") pushd "${COMPILEHOME}"
              whatMadeMe
              popd ;;
        *) pushd "."
	      helpMe ;;
    esac
else # We don't have $1
    helpMe
fi

echo "Ending... bye"
